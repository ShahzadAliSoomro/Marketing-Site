
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import Footer from './components/Footer'
import Navbar from './components/Navbar'
// import { useEffect, useRef } from 'react';
import barba from "barba.js";
import gsap from "gsap";


const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}



export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  // const canvasRef = useRef<HTMLCanvasElement | null>(null);
  // const ctxRef = useRef<CanvasRenderingContext2D | null>(null); // Add a ref for ctx

  // const handleScroll = () => {
  //   const canvas = canvasRef.current;
  //   if (canvas) {
  //     const ctx = ctxRef.current;
  //     if (ctx) {
  //       const rect = canvas.getBoundingClientRect();
  //       if (rect.top < window.innerHeight && rect.bottom >= 0) {
  //         if (window.scrollY < 300) {
  //           const t = document.querySelector(".main")?.getAttribute("data-helixColor");
  //           gsap.to("#helix", 1, {
  //             attr: {
  //               helixColorNUM: t,
  //             },
  //           });
  //           const n = document.querySelector("#helix");
  //           new MutationObserver((e) => {
  //             e.forEach((e) => {
  //               if (e.type === "attributes") {
  //                 const t = document.querySelector("#helix")?.getAttribute("helixcolornum");
  //                 CABLES.patch.setVariable("DotColour", t);
  //               }
  //             });
  //           }).observe(n, {
  //             attributes: true,
  //           });
  //         }
  //       }
  //     }
  //   }
  // };

  // const inter = Inter({ subsets: ['latin'] });

  // useEffect(() => {
  //   const canvas = canvasRef.current;

  //   if (canvas) {
  //     const ctx = canvas.getContext("2d");

  //     if (ctx) {
  //       ctx.fillStyle = "blue";
  //       ctx.fillRect(0, 0, canvas.width, canvas.height);
  //       ctxRef.current = ctx;

  //       window.addEventListener("scroll", handleScroll);

  //       return () => {
  //         window.removeEventListener("scroll", handleScroll);
  //       };
  //     }
  //   }
  // }, []);
  return (
    <html lang="en">
      <body className={inter.className}>
        <Navbar />
        {children}
        <Footer />
        {/* <canvas ref={canvasRef} id="canvas" width="100%" height="100%"></canvas> */}
        </body>
    </html>
  )
}
