import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import Footer from "./components/Footer";
import Navbar from "./components/Navbar";
import ScrollColorChange from "./components/ScrollColorChange";
import Script from "next/script";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        {/* <Script src="/js/cables-library.js" /> */}
        <Script src="/js/patch.js" />
      </head>

      <body className="inter.className">
        <canvas
          className="fixed top-0 left-0 right-0 bottom-0 inset-0 z-20"
          id="glcanvas"
          width="100vw"
          height="100vh"
          tabIndex={1}
        ></canvas>

        <div className="relative z-20">
          <ScrollColorChange>
            <Navbar />
            {children}
            <Footer />
          </ScrollColorChange>
        </div>

        <script
          dangerouslySetInnerHTML={{
            __html: `
      function showError(errId, errMsg) {
        // handle critical errors here if needed
      }
      console.log("CABLES.jsLoaded");

      function patchInitialized(patch) {
        // You can now access the patch object (patch), register variable watchers and so on
      }

      function patchFinishedLoading(patch) {
        // The patch is ready now, all assets have been loaded
      }

      document.addEventListener("CABLES.jsLoaded", function (event) {
        CABLES.patch = new CABLES.Patch({
          patch: CABLES.exportedPatch,
          prefixAssetPath: "",
          assetPath: "assets/",
          jsPath: "js/",
          glCanvasId: "glcanvas",
          glCanvasResizeToWindow: true,
          onError: showError,
          onPatchLoaded: patchInitialized,
          onFinishedLoading: patchFinishedLoading,
          canvas: { alpha: true, premultipliedAlpha: true }
        });
      });

      // disable rubberband effect on mobile devices
      document.getElementById('glcanvas').addEventListener('touchmove', (e) => {
        e.preventDefault();
      }, false);
    `,
          }}
        ></script>
      </body>
    </html>
  );
}
